----- Object Definitions -----
local repS = game:GetService("ReplicatedStorage")
local cas = game:GetService("ContextActionService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local MarketPlaceService = game:GetService("MarketplaceService")
local healthUI = repS.RepItems.HealthUI
local gameStats = repS.GameStats

----- Gamepass Variables ----
local maxPetCount = 2
local dmgMultiple = 1
local damageSpeedMultiple = 1
local walkspeedMultiple = 1

----- Player -----
local player = game.Players.LocalPlayer
local walkingToTarget = false
local diggingInProcess = false
local purchaseDebounce = true
local equipDebounce = true
local guiDebounce = true
local char = nil
local head = nil
local hum = nil
local warningUI = nil
local shopUI = nil
local goldUI = nil
local cardUI = nil
local expUI = nil
local statsUI = nil
local effectsUI = nil
local eggsUI = nil
local gamepassUI = nil
local inventoryUI = nil
local currentDigUI = nil
local settingsUI = nil
local selectedInvenItem = nil
local musicOn = true
local firstLoad = true
local goldInHand = 0
local expInHand = 0
local playerImg = ""
local petList = {}
local equippedPetCount = 0
local guiList = {
	"CardUI",
	"EffectsUI",
	"EggsUI",
	"ExpUI",
	"GamepassUI",
	"GoldUI",
	"InventoryUI",
	"SettingsUI",
	"ShopUI",
	"WarningUI",
	"StatsUI"
}
local playerStats = {
	["Level"] = 1,
	["Experience"] = 0,
	["TimePlayed"] = 0,
	["CoinMultiple"] = 1,
	["ExpMultiple"] = 1,
	["CurrentShovel"] = "Weak Wood Shovel",
	["Gold"] = 0,
	["MatsCollected"] = 0,
	["Zone"] = "Newbie",
	["PetsOwned"] = {},
	["DailyRewards"] = {}
}
local prevStats = {
	["Experience"] = 0,
	["Gold"] = 0
}

----- Zone/GUI Variables -----
local curZone = ''
local openedGUI = nil
local shopConnections = {}
local invenConnections = {}
local eggConnections = {}
local eggConfirmConnections = {}
local evolveList = {}
local currentlyEvolving = false
local currentlyHatching = false
local warningDebounce = false
local currentDiggingUI = nil
local digAnim = Instance.new("Animation")
digAnim.AnimationId = "rbxassetid://6003294148" ---------------------------- CHANGE TO NASTA STUDIO CHANGE TO NASTA STUDIO CHANGE TO NASTA STUDIO CHANGE TO NASTA STUDIO 
local redButtonImg = "rbxassetid://5957031845"
local greenButtonImg = "rbxassetid://5957006513"
local digTrack = nil
local treasureStats = {
	["Coin1"] = 80,
	["Coin2"] = 100,
	["Ingot"] = 120,
	["SmallSack"] = 150,
	["BigSack"] = 200,
	["Barrel"] = 250,
	["MediumChest"] = 350,
	["BigChest"] = 500,
}
local eggCost = {
	["Egg0"] = 800, -- zone 0
	["Egg1"] = 13000, -- zone 1
	["Egg2"] = 250000, -- zone 2
	["Egg3"] = 5000000, -- zone 3
	["Egg4"] = 30000000, -- zone 4
	["Egg5"] = 255000000 -- zone 5
}
local devProcIds = {
	["Coin0"] = 1122867141,
	["Coin1"] = 1122867139,
	["Coin2"] = 1122867136,
	["Coin3"] = 1122867135,
	["Coin4"] = 1122867132,
	["Coin5"] = 1122867131,
	["Exp0"] = 1122868275,
	["Exp1"] = 1122868273,
	["Exp2"] = 1122868272,
	["Exp3"] = 1122868271,
	["Exp4"] = 1122868270,
	["Exp5"] = 1122868269
}

----- Time Display -----
local min = 60
local hour = min * 60 -- 3600
local day = hour * 24 -- 86400
local month = day * 30 -- 2592000

----- Remotes -----
local getStats = repS.Remotes.Get_Stats
local petStats = repS.Remotes.Pet_Stats
local updClient = repS.Remotes.Update_Client
local buySell = repS.Remotes.Buy_Sell
local devProducts = repS.Remotes.Dev_Products
local digR = repS.Remotes.Dig_Event
local up_st = repS.Remotes.Update_Stats
local petAddRemove = repS.Remotes.Pet_Add_Remove
local rewStats = repS.Remotes.Rew_Data
local eggHatch = repS.Remotes.Egg_Hatch

local coreCall do
	local MAX_RETRIES = 8

	local StarterGui = game:GetService('StarterGui')
	local RunService = game:GetService('RunService')

	function coreCall(method, ...)
		local result = {}
		for retries = 1, MAX_RETRIES do
			result = {pcall(StarterGui[method], StarterGui, ...)}
			if result[1] then
				break
			end
			RunService.Stepped:Wait()
		end
		return unpack(result)
	end
end
assert(coreCall('SetCore', 'ResetButtonCallback', false))

up_st.OnClientEvent:Connect(function(key,val,uiToShow)
	if playerStats[key] ~= nil and val ~= nil then
		playerStats[key] = val
	end
	if effectsUI ~= nil then
		updateUI(key)
	end
end)

function variableReset(refreshType)
	maxPetCount = 2
	dmgMultiple = 1
	damageSpeedMultiple = 1
	walkspeedMultiple = 1
	walkingToTarget = false
	diggingInProcess = false
	purchaseDebounce = true
	equipDebounce = true
	guiDebounce = true
	firstLoad = true
	playerImg = ""
	petList = {}
	curZone = ''
	openedGUI = nil
	for _,v in pairs(shopConnections) do
		v:Disconnect()
	end
	for _,v in pairs(invenConnections) do
		v:Disconnect()
	end
	for _,v in pairs(eggConnections) do
		v:Disconnect()
	end
	for _,v in pairs(eggConfirmConnections) do
		v:Disconnect()
	end
	for _,v in pairs(evolveList) do
		v:Destroy()
	end
	currentlyEvolving = false
	currentlyHatching = false
	warningDebounce = false
	if currentDiggingUI ~= nil then
		currentDiggingUI:Destroy()
	end
end

function populateInventory()
	local petsList = playerStats["PetsOwned"]
	for petName,mainArray in pairs(petsList) do -- [PetName] = {{Level,Quantity},{Level,Quantity},{3,10}}
		if repS.Viewports:FindFirstChild(petName) then
			for _,petArray in pairs(mainArray) do -- {Level,Quantity}
				if petArray[2] > 0 then
					for i = 1,petArray[2] do -- #Quantity
						local viewport = repS.Viewports:FindFirstChild(petName):Clone()
						local lvl = Instance.new("IntValue")
						lvl.Name = "Level"
						lvl.Parent = viewport
						lvl.Value = petArray[1]
						viewport.Parent = inventoryUI.MainFrame.Inventory
					end
				end
			end
		end
	end
	updateTotalPetCount()
end

function castRay(origin,direct,filter,filtType)
	local params = RaycastParams.new()
	params.FilterDescendantsInstances = filter
	params.FilterType = filtType
	return workspace:Raycast(origin, direct, params)
end

function numAbb(num)
	num = math.floor(num)
	local abb = "K"
	local cmn = 1000
	if string.len(tostring(num)) >= 13 then
		cmn = 1000000000000
		abb = "T"
	elseif string.len(tostring(num)) >= 10 then
		cmn = 1000000000
		abb = "B"
	elseif string.len(tostring(num)) >= 7 then
		cmn = 1000000
		abb = "M"
	elseif string.len(tostring(num)) <= 3 then
		return num
	end
	local decConc = string.len(tostring(math.floor(num/cmn)))+1
	local tempNum = tostring(math.floor(num/cmn))
	if decConc ~= 4 then
		for i = decConc,4 do
			if i == decConc then
				tempNum = tempNum .. "."
			else
				tempNum = tempNum .. tonumber(string.sub(tostring(num),i-1,i-1))
			end
		end
	end
	local rawResult = tempNum .. abb
	return rawResult
end

local function onInputBegan(input, gameProcessed)
	local KeyCode = input.KeyCode -- Get all keyboard inputs
	if KeyCode == Enum.KeyCode.E and eggsUI ~= nil and eggsUI.MainFrame.Visible and not currentlyHatching and eggsUI.MainFrame.CurrentShop.Value ~= "" then
		if not currentlyHatching then
			local hatchNum = 1
			currentlyHatching = true
			displayEggHatch("Buying: " .. hatchNum .. "x Eggs.\nThis will cost: " .. numAbb(eggCost[eggsUI.MainFrame.CurrentShop.Value]*hatchNum) .. " Would you like to continue?",hatchNum)
		end
	elseif KeyCode == Enum.KeyCode.Q and eggsUI ~= nil and eggsUI.MainFrame.Visible and not currentlyHatching and eggsUI.MainFrame.CurrentShop.Value ~= "" then
		if not currentlyHatching then
			local hatchNum = 3
			currentlyHatching = true
			displayEggHatch("Buying: " .. hatchNum .. "x Eggs.\nThis will cost: " .. numAbb(eggCost[eggsUI.MainFrame.CurrentShop.Value]*hatchNum) .. " Would you like to continue?",hatchNum)
		end
	end
end
UserInputService.InputBegan:Connect(onInputBegan)

function zoneCheck()
	spawn(function()
		while head ~= nil do
			local ray = castRay(head.CFrame.p,Vector3.new(0,35,0),{game.Workspace.RayPrompts},Enum.RaycastFilterType.Whitelist)
			if ray then
				if curZone ~= ray.Instance.Parent.Name then
					curZone = ray.Instance.Parent.Name
					if string.find(ray.Instance.Name,'Shop') and getStats:InvokeServer("requirement","Zone",tonumber(string.sub(ray.Instance.Name,6,6))) then
						if guiDebounce then
							guiDebounce = false
							spawn(function()
								wait(1.5)
								guiDebounce = true
							end)
							openedGUI = shopUI
							guiDisplay(shopUI,"Open","Shop",ray.Instance.Name)
						end
					elseif ray.Instance.Name == "NormalDaily" then
						local check = getStats:InvokeServer("normalDailyReward")
						if check == true then
							local rewardAmount = rewStats:InvokeServer("getRewardNormal")
							displayWarning("Congratulations!\nYou collected " .. numAbb(rewardAmount) .. " as Daily Reward")
						else
							local tl = playerStats["DailyRewards"][2]-playerStats["DailyRewards"][1]
							if math.floor((tl/60/60)%60) == 0 and math.floor((tl/60)%60) == 0 then
								displayWarning("Must wait less than 1 Minute until next reward.")
							else
								displayWarning("Must wait:\n" .. math.floor((tl/60/60)%60) .. " Hours & " .. math.floor((tl/60)%60) .. " Minutes until next reward.")
							end
						end
					elseif ray.Instance.Name == "GroupDaily" then
						if game.Players.LocalPlayer ~= nil and game.Players.LocalPlayer:IsInGroup(8263287) then
							local check = getStats:InvokeServer("groupDailyReward")
							if check == true then
								local rewardAmount = rewStats:InvokeServer("getRewardGroup")
								displayWarning("Congratulations!\nYou collected " .. numAbb(rewardAmount) .. " as Daily Group Reward")
							else
								local tl = playerStats["DailyRewards"][3]-playerStats["DailyRewards"][1]
								if math.floor((tl/60/60)%60) == 0 and math.floor((tl/60)%60) == 0 then
									displayWarning("Must wait less than 1 Minute until next reward.")
								else
									displayWarning("Must wait:\n" .. math.floor((tl/60/60)%60) .. " Hours & " .. math.floor((tl/60)%60) .. " Minutes until next reward.")
								end
							end
						else
							displayWarning("Get 3 Times More Daily Rewards by joining Nasta Studios Roblox Group!")
						end
					elseif string.find(ray.Instance.Name,'Egg') then
						if guiDebounce then
							guiDebounce = false
							spawn(function()
								wait(1.5)
								guiDebounce = true
							end)
							local populateInfo = getStats:InvokeServer("eggShop",ray.Instance.Name)
							if populateInfo ~= nil then
								eggsUI.MainFrame.CurrentShop.Value = ray.Instance.Name
								openedGUI = eggsUI
								for i,petInfo in pairs(populateInfo) do
									local frame = eggsUI.MainFrame:FindFirstChild("Pet" .. i-1)
									local vpCl = repS.Viewports:FindFirstChild(petInfo[1]):FindFirstChildWhichIsA("ViewportFrame"):Clone()
									vpCl.Parent = frame.ImageLabel
									rotateViewport(vpCl)
									frame.TextLabel.Text = (petInfo[3]-petInfo[2])*100 .. "%"
								end
								local function clickedBuy()
									if not currentlyHatching then
										local hatchNum = 1
										currentlyHatching = true
										displayEggHatch("Buying: " .. hatchNum .. "x Eggs.\nThis will cost: " .. numAbb(eggCost[eggsUI.MainFrame.CurrentShop.Value]*hatchNum) .. " Would you like to continue?",hatchNum)
									end
								end
								local tempCon = eggsUI.MainFrame.E.MouseButton1Click:Connect(clickedBuy)
								table.insert(eggConnections,tempCon)
								
								local function clickedBuy()
									if not currentlyHatching then
										local hatchNum = 3
										currentlyHatching = true
										displayEggHatch("Buying: " .. hatchNum .. "x Eggs.\nThis will cost: " .. numAbb(eggCost[eggsUI.MainFrame.CurrentShop.Value]*hatchNum) .. " Would you like to continue?",hatchNum)
									end
								end
								local tempCon = eggsUI.MainFrame.Q.MouseButton1Click:Connect(clickedBuy)
								table.insert(eggConnections,tempCon)
								
								eggsUI.MainFrame.Visible = true
								tweenGuiObj(eggsUI.MainFrame,false,UDim2.new(0.5,0,0.5,0),Enum.EasingDirection.Out,Enum.EasingStyle.Sine,0.25)
							end
						end
					end
				end
			else
				if curZone ~= '' then
					curZone = ''
					if openedGUI ~= nil and openedGUI.Name == "ShopUI" then
						guiDisplay(openedGUI,"Close")
					elseif openedGUI ~= nil and openedGUI.Name == "EggsUI" then
						for _,v in pairs(eggConnections) do
							if v ~= nil then
								v:Disconnect()
							end
						end
						if warningUI.Frame.Question.Visible ~= true then
							eggsUI.MainFrame.CurrentShop.Value = ""
						end
						spawn(function()
							tweenGuiObj(eggsUI.MainFrame,false,UDim2.new(.5,0,-0.5,0),Enum.EasingDirection.In,Enum.EasingStyle.Sine,0.25)
							wait(0.4)
							eggsUI.MainFrame.Visible = false
						end)
						for _,v in pairs(eggsUI.MainFrame:GetChildren()) do
							if string.find(v.Name,"Pet") and v.Name ~= "Pet5" then ----------------- Will need to change last part when updating 6 items
								if v.ImageLabel:FindFirstChildWhichIsA("ViewportFrame") then
									v.ImageLabel:FindFirstChildWhichIsA("ViewportFrame"):Destroy()
								end
								v.TextLabel.Text = ""
							end
						end
					end
				end
			end
			wait(0.25)
		end
	end)
end

function guiDisplay(guiObj,action,guiType,partName)
	local mf = guiObj.MainFrame
	if action == "Close" then
		for _,con in pairs(shopConnections) do
			con:Disconnect()
		end
		tweenGuiObj(mf,false,UDim2.new(-0.5,0,0.5,0),Enum.EasingDirection.Out,Enum.EasingStyle.Bounce,0.25)
		guiObj.Enabled = false
		if mf:FindFirstChildWhichIsA("ViewportFrame") then
			mf:FindFirstChildWhichIsA("ViewportFrame"):Destroy()
		end
		mf.Power.Text = ""
		mf.Cost.Text = ""
		if guiType == "Shop" then
			displayItems(mf,partName)
		end
	else
		closeOtherUI()
		local function clickedBuy()
			if purchaseDebounce then
				purchaseDebounce = false
				local bought = buySell:InvokeServer("Buy",mf:FindFirstChildWhichIsA("IntValue").Name)
				if bought then
					local itemName = mf:FindFirstChildWhichIsA("IntValue").Name
					if gameStats.PetStats:FindFirstChild(itemName) then
						local viewport = repS.Viewports:FindFirstChild(itemName):Clone()
						local lvl = Instance.new("IntValue")
						lvl.Name = "Level"
						lvl.Parent = viewport
						lvl.Value = 1
						viewport.Parent = inventoryUI.MainFrame.Inventory
					end
					displayWarning("Successfully Bought Item: " .. itemName)
				elseif bought == false then
					spawn(function()
						wait(1)
						devProducts:FireServer(getDevProdId("Gold",mf:FindFirstChildWhichIsA("IntValue").Value-playerStats["Gold"]))
					end)
					displayWarning("Oh No! You are missing " .. numAbb(mf:FindFirstChildWhichIsA("IntValue").Value-playerStats["Gold"]) .. " Gold.\nYou can Claim Treasures or Purchase more Gold.")
				end
				wait(4)
				purchaseDebounce = true
			end
		end
		local tempCon = mf.BuyButton.MouseButton1Click:Connect(clickedBuy)
		table.insert(shopConnections, tempCon)
		displayItems(mf,partName)
		guiObj.Enabled = true
		tweenGuiObj(mf,false,UDim2.new(0.5,0,0.5,0),Enum.EasingDirection.In,Enum.EasingStyle.Bounce,0.25)
		wait(0.5)
	end
end

function displayWarning(text,cmd)
	if not warningDebounce then
		warningDebounce = true
		warningUI.Frame.Description.Text = text
		tweenGuiObj(warningUI.Frame,false,UDim2.new(0.5,0,0.5,0),Enum.EasingDirection.In,Enum.EasingStyle.Sine,0.25)
		if cmd == "Evolution" then
			wait(8)
		else
			wait(3)
		end
		tweenGuiObj(warningUI.Frame,false,UDim2.new(0.5,0,1.5,0),Enum.EasingDirection.Out,Enum.EasingStyle.Sine,0.25)
		wait(0.5)
		warningUI.Frame.Description.Text = ""
		warningDebounce = false
	end
end

function displayEggHatch(text,hatchNum)
	if not warningDebounce then
		warningDebounce = true
		for _,con in pairs(eggConfirmConnections) do
			con:Disconnect()
		end
		warningUI.Frame.NoButton.Visible = true
		warningUI.Frame.YesButton.Visible = true
		warningUI.Frame.Question.Text = text
		warningUI.Frame.Title.Text = "CONFIRMATION"
		tweenGuiObj(warningUI.Frame,false,UDim2.new(0.5,0,0.5,0),Enum.EasingDirection.In,Enum.EasingStyle.Sine,0.25)
		local function clickedBuy()
			tweenGuiObj(warningUI.Frame,false,UDim2.new(0.5,0,1.5,0),Enum.EasingDirection.Out,Enum.EasingStyle.Sine,0.25)
			if eggsUI.MainFrame.Position ~= UDim2.new(0.5,0,0.5,0) then
				for _,v in pairs(eggConnections) do
					if v ~= nil then
						v:Disconnect()
					end
				end
			end
			wait(0.5)
			warningUI.Frame.Question.Text = ""
			warningUI.Frame.NoButton.Visible = false
			warningUI.Frame.YesButton.Visible = false
			warningDebounce = false
			wait(1)
			currentlyHatching = false
		end
		local tempCon = warningUI.Frame.NoButton.MouseButton1Click:Connect(clickedBuy)
		table.insert(eggConfirmConnections,tempCon)
		
		local function clickedBuy()
			local tryingTobuy = buySell:InvokeServer("BuyEggs",eggCost[eggsUI.MainFrame.CurrentShop.Value]*hatchNum)
			if tryingTobuy == true then
				local attempt = eggHatch:InvokeServer(hatchNum,eggsUI.MainFrame.CurrentShop.Value)
				if attempt ~= nil then
					warningUI.Frame.Question.Text = ""
					warningUI.Frame.NoButton.Visible = false
					warningUI.Frame.YesButton.Visible = false
					eggHatching(attempt)
				end
			else
				warningUI.Frame.Question.Text = ""
				warningUI.Frame.NoButton.Visible = false
				warningUI.Frame.YesButton.Visible = false
				warningUI.Frame.Description.Text = "You need " .. numAbb(eggCost[eggsUI.MainFrame.CurrentShop.Value]*hatchNum-playerStats["Gold"]) .. " more Gold to purchase these Eggs."
				spawn(function()
					wait(1)
					devProducts:FireServer(getDevProdId("Gold",eggCost[eggsUI.MainFrame.CurrentShop.Value]*hatchNum-playerStats["Gold"]))
				end)
				wait(3)
				tweenGuiObj(warningUI.Frame,false,UDim2.new(0.5,0,1.5,0),Enum.EasingDirection.Out,Enum.EasingStyle.Sine,0.25)
				wait(0.5)
				warningUI.Frame.Description.Text = ""
				warningDebounce = false
				currentlyHatching = false
			end
		end
		local tempCon = warningUI.Frame.YesButton.MouseButton1Click:Connect(clickedBuy)
		table.insert(eggConfirmConnections,tempCon)
	end
end

function eggHatching(petList)
	local hatchNum = #petList
	local viewports = {}
	warningUI.Frame.Title.Text = "EGG HATCH"
	for _,v in pairs(petList) do
		if repS.Viewports:FindFirstChild(v) then
			table.insert(viewports,repS.Viewports:FindFirstChild(v):FindFirstChildWhichIsA("ViewportFrame"):Clone())
			local itemName = v
			if gameStats.PetStats:FindFirstChild(itemName) then
				local viewport = repS.Viewports:FindFirstChild(itemName):Clone()
				local lvl = Instance.new("IntValue")
				lvl.Name = "Level"
				lvl.Parent = viewport
				lvl.Value = 1
				viewport.Parent = inventoryUI.MainFrame.Inventory
			end
		end
	end

	local eggImg = warningUI.Frame.EggImg
	local x = repS.Viewports:FindFirstChild(eggsUI.MainFrame.CurrentShop.Value):FindFirstChildWhichIsA("ViewportFrame"):Clone()
	if eggsUI.MainFrame.Visible == false then
		eggsUI.MainFrame.CurrentShop.Value = ""
	end
	x.Parent = eggImg
	
	for _,viewport in pairs(viewports) do
		for _,evolveImg in pairs(warningUI.Frame:GetChildren()) do
			if hatchNum == 1 then
				if evolveImg.Name == "EvolveImageMid" and not evolveImg:FindFirstChildWhichIsA("ViewportFrame") then
					viewport.Parent = evolveImg
					evolveImg.Position = UDim2.new(0.372, 0,0.415, 0)
					evolveImg.Size = UDim2.new(0,0,0,0)
				end
			else
				if string.find(evolveImg.Name,"EvolveImage") and not evolveImg:FindFirstChildWhichIsA("ViewportFrame") then
					viewport.Parent = evolveImg
					evolveImg.Position = UDim2.new(0.372, 0,0.415, 0)
					evolveImg.Size = UDim2.new(0,0,0,0)
				end
			end
		end
	end
	
	spawn(function()
		for i = 1,12 do
			eggImg.Rotation = 20
			wait(0.1)
			eggImg.Rotation = -20
			wait(0.1)
		end
		eggImg.Rotation = 0
		for i = 1,10 do
			wait(0.1)
			if eggImg:FindFirstChildWhichIsA("ViewportFrame") then
				eggImg:FindFirstChildWhichIsA("ViewportFrame").ImageTransparency += 0.1
			end
		end
		wait(0.3)
		eggImg:FindFirstChildWhichIsA("ViewportFrame"):Destroy()
		tweenGuiObj(warningUI.Frame.EvolveImage,UDim2.new(0.259, 0,0.255, 0),UDim2.new(0.681, 0,0.415, 0),Enum.EasingDirection.Out,Enum.EasingStyle.Sine,0.5)
		tweenGuiObj(warningUI.Frame.EvolveImageMid,UDim2.new(0.259, 0,0.255, 0),UDim2.new(0.372, 0,0.415, 0),Enum.EasingDirection.Out,Enum.EasingStyle.Sine,0.5)
		tweenGuiObj(warningUI.Frame.EvolveImageLeft,UDim2.new(0.259, 0,0.255, 0),UDim2.new(0.057, 0,0.418, 0),Enum.EasingDirection.Out,Enum.EasingStyle.Sine,0.5)
		wait(1)
		for _,v in pairs(viewports) do
			spawn(function()
				local model = v:FindFirstChildWhichIsA("Model")
				for i = 1,120 do
					wait()
					if model ~= nil then
						model:SetPrimaryPartCFrame(model.PrimaryPart.CFrame * CFrame.Angles(0,math.rad(2),0))
					end
				end
				model.Parent:Destroy()
			end)
		end
		local lvlText = "Unlocked " .. hatchNum .. " New Pets!"
		if hatchNum == 1 then
			lvlText = "Unlocked " .. hatchNum .. " New Pet!"
		end
		spawn(function()
			for i = 1,string.len(lvlText) do
				wait(0.06)
				warningUI.Frame.Unlock.Text = warningUI.Frame.Unlock.Text .. string.sub(lvlText,i,i)
			end
			wait(2.5)
			warningUI.Frame.Title.Text = "WARNING"
			eggImg.ImageTransparency = 0
			warningUI.Frame.Unlock.Text = ""
			tweenGuiObj(warningUI.Frame,false,UDim2.new(0.5,0,1.5,0),Enum.EasingDirection.Out,Enum.EasingStyle.Sine,0.25)
			wait(1.5)
			warningDebounce = false
			currentlyHatching = false
		end)
	end)
end

function displayItems(mf,shopLevel)
	for _,v in pairs(mf.ShopUI:GetChildren()) do
		if v.Name == shopLevel then
			v.Visible = true
			for _,item in pairs(v:GetChildren()) do
				if item:IsA("ImageButton") then
					local function clickedItem()
						local default = "Shovel"
						if gameStats:FindFirstChild(item.Name,true).Parent.Name == "PetStats" then
							default = "Pet"
						end
						if mf:FindFirstChild("DisplayImage") then
							mf:FindFirstChild("DisplayImage"):Destroy()
						end
						local vpcl = item.ViewportFrame:Clone()
						vpcl.Name = "DisplayImage"
						vpcl.Parent = mf
						vpcl.Position = UDim2.new(0.76, 0,0.27, 0)
						vpcl.Size = UDim2.new(0.158,0,0.217,0)
						rotateViewport(vpcl)
						mf.Power.Text = "Power of this " .. default .. ": " .. numAbb(gameStats:FindFirstChild(item.Name,true).Damage.Value*dmgMultiple)
						mf.Cost.Text = "Cost: " .. numAbb(gameStats:FindFirstChild(item.Name,true).Cost.Value)
						mf:FindFirstChildWhichIsA("IntValue").Value = gameStats:FindFirstChild(item.Name,true).Cost.Value
						mf:FindFirstChildWhichIsA("IntValue").Name = item.Name
					end
					local tempCon = item.MouseButton1Click:Connect(clickedItem)
					table.insert(shopConnections, tempCon)
				end
			end
		else
			v.Visible = false
		end
	end
end

function expReq(lvl)
	return 25*(lvl*lvl)-25*lvl+50
end

function updateUI(uiToShow)
	local cf = cardUI.Frame.MainUI
	if uiToShow ~= nil and (uiToShow == "Gold") then
		local ui = repS.RepItems:FindFirstChild(uiToShow):Clone()
		local tempVal = numAbb(math.floor(playerStats[uiToShow]-prevStats[uiToShow]))
		ui.Parent = effectsUI.Frame
		ui.Txt.Text = "+"
		if playerStats[uiToShow]-prevStats[uiToShow] > 0 then
			ui.UiVal.Text = tempVal
			spawn(function()
				if uiToShow == "Gold" then
					tweenGuiObj(ui,UDim2.new(0.471,0,0.142,0),false,Enum.EasingDirection.Out,Enum.EasingStyle.Sine,0.25)
					wait(1)
					tweenGuiObj(ui,UDim2.new(0,0,0,0),UDim2.new(0.204,-30,0.486,-20),Enum.EasingDirection.In,Enum.EasingStyle.Sine,1)
					wait(1)
					goldUI.ExteriorUI.Coins.Count.Text = numAbb(playerStats["Gold"])
				end
			end)
			prevStats["Gold"] = playerStats["Gold"]
		else
			goldUI.ExteriorUI.Coins.Count.Text = numAbb(playerStats["Gold"])
			prevStats["Gold"] = playerStats["Gold"]
		end
	elseif uiToShow ~= nil and ((uiToShow == "Level") or (uiToShow == "Experience")) then
		if uiToShow == "Level" then
			local ui = repS.RepItems:FindFirstChild(uiToShow):Clone()
			ui.Parent = effectsUI.Frame
			ui.UiVal.Text = "Lvl Up: " .. playerStats[uiToShow]
			spawn(function()
				tweenGuiObj(ui,UDim2.new(0.471,0,0.142,0),false,Enum.EasingDirection.Out,Enum.EasingStyle.Sine,0.5)
				wait(1)
				tweenGuiObj(ui,UDim2.new(0,0,0,0),UDim2.new(0.166,0,0.058,0),Enum.EasingDirection.In,Enum.EasingStyle.Sine,1)
				wait(1)
				cf.bar1.level.Text = "Level: " .. numAbb(playerStats["Level"])
			end)
		end
		if uiToShow == "Experience" then
			local ui = repS.RepItems:FindFirstChild(uiToShow):Clone()
			local tempVal = numAbb(math.floor(playerStats[uiToShow]-prevStats[uiToShow]))
			if playerStats[uiToShow]-prevStats[uiToShow] > 0 then
				ui.Parent = effectsUI.Frame
				ui.UiVal.Text = tempVal
				spawn(function()
					
					tweenGuiObj(ui,UDim2.new(0.471,0,0.142,0),false,Enum.EasingDirection.Out,Enum.EasingStyle.Sine,0.25)
					wait(1)
					tweenGuiObj(ui,UDim2.new(0,0,0,0),UDim2.new(0.167,0,0.127,0),Enum.EasingDirection.In,Enum.EasingStyle.Sine,1)
					wait(1)
					cf.bar2.exp.Text = "Exp: " .. numAbb(playerStats["Experience"]) .. "/" .. numAbb(expReq(playerStats["Level"]))	
				end)
				prevStats["Experience"] = playerStats["Experience"]
			else
				cf.bar2.exp.Text = "Exp: " .. numAbb(playerStats["Experience"]) .. "/" .. numAbb(expReq(playerStats["Level"]))
			end
			prevStats["Experience"] = playerStats["Experience"]
		end
	end
	if firstLoad == true then
		firstLoad = false
		cf.bar2.exp.Text = "Exp: " .. numAbb(playerStats["Experience"]) .. "/" .. numAbb(expReq(playerStats["Level"]))
		prevStats["Experience"] = playerStats["Experience"]
	end
	statsUI.MainFrame.MainUI.lvl.Text = "Current Level: " .. numAbb(playerStats["Level"])
	statsUI.MainFrame.MainUI.exp.Text = "Experience: " .. numAbb(playerStats["Experience"]) .. "/" .. numAbb(expReq(playerStats["Level"]))
	statsUI.MainFrame.MainUI.treasure.Text = "Treasure Found: " .. numAbb(playerStats["MatsCollected"])
end

function loadUI()
	----- Player Stats -----
	local cf = cardUI.Frame.MainUI
	updateUI()
	goldUI.ExteriorUI.BuyCoins.MouseButton1Click:Connect(function()
		if guiDebounce then
			guiDebounce = false
			spawn(function()
				wait(1.5)
				guiDebounce = true
			end)
			devProdUI(goldUI, "Gold")
		end
	end)
	cf.exp.MouseButton1Click:Connect(function()
		if guiDebounce then
			guiDebounce = false
			spawn(function()
				wait(1.5)
				guiDebounce = true
			end)
			devProdUI(expUI, "Exp")
		end
	end)
	cf.stats.MouseButton1Click:Connect(function()
		if guiDebounce then
			guiDebounce = false
			spawn(function()
				wait(1.5)
				guiDebounce = true
			end)
			if not statsUI.MainFrame.Visible then
				closeOtherUI()
				local dmg = getStats:InvokeServer("getDamage")
				local pDmg = petStats:InvokeServer("petDamage")
				statsUI.MainFrame.MainUI.dmg.Text = "Damage per Second: " .. numAbb((math.floor(dmg/digTrack.Length)+math.floor(pDmg))*dmgMultiple)
				local tempDate = playerStats["TimePlayed"]
				local tempMonth = getDate(tempDate,month,"Months")
				tempDate -= tempMonth[2]
				local tempDay = getDate(tempDate,day,"Days")
				tempDate -= tempDay[2]
				local tempHour = getDate(tempDate,hour,"Hours")
				tempDate -= tempHour[2]
				updateTotalPetCount()
				statsUI.MainFrame.MainUI.time.Text = "Time Played:  " .. tempMonth[1] .. " | " .. tempDay[1] .. " | " .. tempHour[1]
				tweenGuiObj(statsUI.MainFrame,false,UDim2.new(1,-10,1,-10),Enum.EasingDirection.Out,Enum.EasingStyle.Sine,0.25)
				statsUI.MainFrame.MainUI.PlayerDisplay.Image = playerImg
				statsUI.MainFrame.Visible = true
			end
		end
	end)
	gamepassUI.Options.Top.RobuxButton.MouseButton1Click:Connect(function()
		if guiDebounce then
			guiDebounce = false
			spawn(function()
				wait(1.5)
				guiDebounce = true
			end)
			if not gamepassUI.MainFrame.Visible then
				closeOtherUI()
				gamepassUI.MainFrame.Cost.Text = ""
				gamepassUI.MainFrame.Description.Text = ""
				gamepassUI.MainFrame.DisplayImage.Image = ""
				local shopFrame = gamepassUI.MainFrame.GamepassShop
				for _,btn in pairs(shopFrame:GetChildren()) do
					if btn:IsA("ImageButton") then
						local function clickedItem()
							gamepassUI.MainFrame.Cost.Text = "Robux: " .. btn.RobuxCost.Value
							gamepassUI.MainFrame.Description.Text = btn.Description.Value
							gamepassUI.MainFrame.CurrentItem.Value = btn.ProductID.Value
							gamepassUI.MainFrame.DisplayImage.Image = btn.ImageLabel.Image
						end
						local tempCon = btn.MouseButton1Click:Connect(clickedItem)
						table.insert(shopConnections, tempCon)
					end
				end
				
				local function clickedItem()
					local success, message = pcall(function()
						hasPass = MarketPlaceService:UserOwnsGamePassAsync(game.Players.LocalPlayer.UserId, gamepassUI.MainFrame.CurrentItem.Value)
					end)
					if not success then
						return
					end
					if hasPass then
						displayWarning("You already own this Gamepass")
					else
						MarketPlaceService:PromptGamePassPurchase(game.Players.LocalPlayer, gamepassUI.MainFrame.CurrentItem.Value)
					end
				end
				local tempCon = gamepassUI.MainFrame.BuyButton.MouseButton1Click:Connect(clickedItem)
				table.insert(shopConnections, tempCon)
				
				tweenGuiObj(gamepassUI.MainFrame,false,UDim2.new(0.5,0,0.5,0),Enum.EasingDirection.Out,Enum.EasingStyle.Sine,0.25)
				gamepassUI.MainFrame.Visible = true
			end
		end
	end)
	inventoryUI.Options.Bottom.InventoryButton.MouseButton1Click:Connect(function()
		if guiDebounce then
			guiDebounce = false
			spawn(function()
				wait(1.5)
				guiDebounce = true
			end)
			if not inventoryUI.MainFrame.Visible then
				closeOtherUI()
				tweenGuiObj(inventoryUI.MainFrame,false,UDim2.new(0.5,0,0.5,0),Enum.EasingDirection.Out,Enum.EasingStyle.Sine,0.25)
				inventoryUI.MainFrame.Visible = true
				local mf = inventoryUI.MainFrame
				mf.Evolve.ImageTransparency = 0.65
				mf.Evolve.TextLabel.TextTransparency = 0.65
				for _,btn in pairs(mf.Inventory:GetChildren()) do
					if btn:IsA("ImageButton") then
						local function clickedItem()
							evolveList = {}
							if mf:FindFirstChild("DisplayImage") then
								mf:FindFirstChild("DisplayImage"):Destroy()
							end
							
							for _,pet in pairs(mf.Inventory:GetChildren()) do
								if pet:IsA("ImageButton") and pet.Name == btn.Name and pet.Level.Value == btn.Level.Value and btn.Level.Value < 5 then
									table.insert(evolveList,pet:FindFirstChildWhichIsA("ViewportFrame"))
									if #evolveList == 3 then
										mf.Evolve.ImageTransparency = 0
										mf.Evolve.TextLabel.TextTransparency = 0
										break
									end
								end
							end
							if #evolveList < 3 then
								mf.Evolve.ImageTransparency = 0.65
								mf.Evolve.TextLabel.TextTransparency = 0.65
							end
							if btn:FindFirstChild("Equipped") then
								mf.unEquip.Image = redButtonImg
								mf.unEquip.TextLabel.TextColor3 = Color3.fromRGB(86, 13, 13)
								mf.unEquip.TextLabel.Text = "UNEQUIP"
							else
								mf.unEquip.Image = greenButtonImg
								mf.unEquip.TextLabel.TextColor3 = Color3.fromRGB(32, 104, 37)
								mf.unEquip.TextLabel.Text = "EQUIP"
							end
							selectedInvenItem = btn
							local vpcl = btn.ViewportFrame:Clone()
							vpcl.Name = "DisplayImage"
							vpcl.Parent = mf
							vpcl.Position = UDim2.new(0.76, 0,0.27, 0)
							vpcl.Size = UDim2.new(0.158,0,0.217,0)
							rotateViewport(vpcl)
							local dmgAmount = gameStats:FindFirstChild(btn.Name,true).Damage.Value
							local boostAmount = gameStats:FindFirstChild(btn.Name,true).Boost.Value
							mf.Damage.Text = "Damage: " .. numAbb(math.floor(dmgAmount + dmgAmount*(btn.Level.Value/10))*dmgMultiple)
							mf.Boost.Text = "Boost: " .. numAbb(math.floor(boostAmount + boostAmount*(btn.Level.Value/10)))
							mf.Level.Text = "Level: " .. btn.Level.Value
							mf:FindFirstChildWhichIsA("IntValue").Value = btn.Level.Value
							mf:FindFirstChildWhichIsA("IntValue").Name = btn.Name
						end
						local tempCon = btn.MouseButton1Click:Connect(clickedItem)
						table.insert(invenConnections, tempCon)
						local function clickEvolve()
							if mf:FindFirstChild("DisplayImage") and selectedInvenItem ~= nil and #evolveList == 3 and not currentlyEvolving then
								currentlyEvolving = true
								local vpList = {}
								local petName = selectedInvenItem.Name
								local dmgAmount = gameStats:FindFirstChild(selectedInvenItem.Name,true).Damage.Value
								local boostAmount = gameStats:FindFirstChild(selectedInvenItem.Name,true).Boost.Value
								local currentLvl = selectedInvenItem.Level.Value + 1
								local currentBoost = numAbb(math.floor(boostAmount + boostAmount*(currentLvl/10)))
								local currentDmg = numAbb(math.floor(dmgAmount + dmgAmount*(currentLvl/10))*dmgMultiple)
								
								for petId,petBtn in pairs(petList) do
									for _,v in pairs(evolveList) do
										if petBtn == v.Parent then
											petAddRemove:FireServer("Remove",petId)
											petList[petId] = nil
											local vpCl = v:Clone()
											table.insert(vpList,vpCl)
											table.remove(evolveList,table.find(evolveList,v))
											v.Parent:Destroy()
										end
									end
								end
								for _,v in pairs(evolveList) do
									local vpCl = v:Clone()
									table.insert(vpList,vpCl)
									v.Parent:Destroy()
								end
								local bought = buySell:InvokeServer("EvolvePet",petName,currentLvl)
								if bought then
									local itemName = petName
									if gameStats.PetStats:FindFirstChild(itemName) then
										local viewport = repS.Viewports:FindFirstChild(itemName):Clone()
										local lvl = Instance.new("IntValue")
										lvl.Name = "Level"
										lvl.Parent = viewport
										lvl.Value = currentLvl
										viewport.Parent = inventoryUI.MainFrame.Inventory
									end
								end
								warningUI.Frame.Title.Text = "EVOLUTION"
								for _,vp in pairs(vpList) do
									for _,ei in pairs(warningUI.Frame:GetChildren()) do
										if string.find(ei.Name,"EvolveImage") and not ei:FindFirstChildWhichIsA("ViewportFrame") then
											vp.Parent = ei
											spawn(function()
												for i = 1,15 do
													ei.Rotation = 20
													wait(0.1)
													ei.Rotation = -20
													wait(0.1)
												end
												ei.Rotation = 0
												if ei.Name ~= "EvolveImageMid" then
													tweenGuiObj(ei,false,warningUI.Frame.EvolveImageMid.Position,Enum.EasingDirection.In,Enum.EasingStyle.Sine,0.5)
													wait(0.6)
													ei:FindFirstChildWhichIsA("ViewportFrame"):Destroy()
													if ei.Name == "EvolveImageLeft" then
														ei.Position = UDim2.new(0.057, 0,0.418, 0)
													elseif ei.Name == "EvolveImage" then
														ei.Position = UDim2.new(0.681, 0,0.415, 0)
													end
												else
													wait(1.2)
													tweenGuiObj(ei,false,warningUI.Frame.EvolveImageLeft.Position,Enum.EasingDirection.Out,Enum.EasingStyle.Sine,0.5)
													spawn(function()
														local model = ei:FindFirstChildWhichIsA("ViewportFrame"):FindFirstChildWhichIsA("Model")
														for i = 1,145 do
															wait()
															if model ~= nil then
																model:SetPrimaryPartCFrame(model.PrimaryPart.CFrame * CFrame.Angles(0,math.rad(2),0))
															end
														end
														model.Parent:Destroy()
														warningUI.Frame.Lvl.Text = ""
														warningUI.Frame.Boost.Text = ""
														warningUI.Frame.Damage.Text = ""
														warningUI.Frame.Title.Text = "WARNING"
														ei.Position = UDim2.new(0.372, 0,0.415, 0)
													end)
													wait(0.6)
													local lvlText = "Level: " .. currentLvl
													local boostText = "Boost: " .. currentBoost
													local dmgText = "Damage: " .. currentDmg
													currentlyEvolving = false
													spawn(function()
														for i = 1,string.len(lvlText) do
															wait(0.06)
															warningUI.Frame.Lvl.Text = warningUI.Frame.Lvl.Text .. string.sub(lvlText,i,i)
														end
													end)
													spawn(function()
														for i = 1,string.len(boostText) do
															wait(0.06)
															warningUI.Frame.Boost.Text = warningUI.Frame.Boost.Text .. string.sub(boostText,i,i)
														end
													end)
													spawn(function()
														for i = 1,string.len(dmgText) do
															wait(0.06)
															warningUI.Frame.Damage.Text = warningUI.Frame.Damage.Text .. string.sub(dmgText,i,i)
														end
													end)
												end
											end)
											break
										end
									end
								end
								closeOtherUI()
								displayWarning("","Evolution")
							end
						end
						local tmpCon = mf.Evolve.MouseButton1Click:Connect(clickEvolve)
						table.insert(invenConnections, tempCon)
						
						local function clickedUnEquip()
							if mf:FindFirstChild("DisplayImage") and selectedInvenItem ~= nil and equipDebounce then
								equipDebounce = false
								if selectedInvenItem:FindFirstChild("Equipped") then
									local petId = ""
									for i,v in pairs(petList) do
										if v == selectedInvenItem then
											petId = i
											petList[i] = nil
											break
										end
									end
									selectedInvenItem:FindFirstChild("Equipped"):Destroy()
									petAddRemove:FireServer("Remove",petId)
									equippedPetCount -= 1
								elseif not selectedInvenItem:FindFirstChild("Equipped") then
									if equippedPetCount < maxPetCount then
										equippedPetCount += 1
										local eq = repS.RepItems.Equipped:Clone()
										eq.Parent = selectedInvenItem
										local dmgAmount = gameStats:FindFirstChild(selectedInvenItem.Name,true).Damage.Value
										local boostAmount = gameStats:FindFirstChild(selectedInvenItem.Name,true).Boost.Value
										local petDmg = math.floor(dmgAmount + dmgAmount*(selectedInvenItem.Level.Value/10))
										local petBoost = math.floor(boostAmount + boostAmount*(selectedInvenItem.Level.Value/10))
										local petId = player.UserId
										local ltrs = {"A","B","C","D","E","F","G","Z","X","Y","W","V","S","T"}
										for i = 1,9 do
											if i%2 == 0 then
												petId = petId .. math.random(i,9)
											else
												petId = petId .. ltrs[math.random(i,14)]
											end
										end
										petList[petId] = selectedInvenItem
										petAddRemove:FireServer("Add",petId,mf:FindFirstChild("DisplayImage"):FindFirstChildWhichIsA("Model").Name,petDmg,petBoost)
									else
										displayWarning("Maximum pets reached! Buy the +4 or +8 Pets Gamepass to unlock more Amazing Pets")
									end
								end
								
								if selectedInvenItem ~= nil then
									if selectedInvenItem:FindFirstChild("Equipped") then
										mf.unEquip.Image = redButtonImg
										mf.unEquip.TextLabel.TextColor3 = Color3.fromRGB(86, 13, 13)
										mf.unEquip.TextLabel.Text = "UNEQUIP"
									else
										mf.unEquip.Image = greenButtonImg
										mf.unEquip.TextLabel.TextColor3 = Color3.fromRGB(32, 104, 37)
										mf.unEquip.TextLabel.Text = "EQUIP"
									end
								end
								spawn(function()
									wait(1)
									equipDebounce = true
								end)
							end
						end
						local tmpCon = mf.unEquip.MouseButton1Click:Connect(clickedUnEquip)
						table.insert(invenConnections, tempCon)
					end
				end
			end
		end
	end)
	inventoryUI.Options.Top.SettingsButton.MouseButton1Click:Connect(function()
		if guiDebounce then
			guiDebounce = false
			spawn(function()
				wait(1.5)
				guiDebounce = true
			end)
			if not settingsUI.MainFrame.Visible then
				closeOtherUI()
				local function clickedItem()
					musicOn = false
				end
				local tempCon = settingsUI.MainFrame.OffButton.MouseButton1Click:Connect(clickedItem)
				table.insert(shopConnections,tempCon)
				
				local function clickedItem()
					musicOn = true
				end
				local tempCon = settingsUI.MainFrame.OnButton.MouseButton1Click:Connect(clickedItem)
				table.insert(shopConnections,tempCon)
				tweenGuiObj(settingsUI.MainFrame,false,UDim2.new(0.5,0,0.5,0),Enum.EasingDirection.Out,Enum.EasingStyle.Sine,0.25)
				settingsUI.MainFrame.Visible = true
			end
		end
	end)
	cf.boost.MouseButton1Click:Connect(function()
		--[[
		if guiDebounce then
			guiDebounce = false
			spawn(function()
				wait(1.5)
				guiDebounce = true
			end)
			-- Boost UI
		end
		--]]
	end)
end

function updateTotalPetCount()
	local totalPetCount = 0
	for _,v in pairs(inventoryUI.MainFrame.Inventory:GetChildren()) do
		if v:IsA("ImageButton") then
			totalPetCount += 1
		end
	end
	statsUI.MainFrame.MainUI.pets.Text = "Pets Owned: " .. totalPetCount
end

----- Client Update -----
updClient.OnClientEvent:Connect(function(cmd,item)
	if cmd == "Door" then
		item.Color = Color3.fromRGB(255,255,255)
		item.Material = Enum.Material.ForceField
		if item:FindFirstChild("SurfaceGui") then
			item.SurfaceGui:Destroy()
		end
	elseif cmd == "Warn" then
		displayWarning(item)
	elseif cmd == "Gold" then
		updClient:FireServer("Gold",math.floor(goldInHand))
	elseif cmd == "Exp" then
		updClient:FireServer("Exp",math.floor(expInHand))
	elseif cmd == "+4 Pets" and checkGamepass(game.Players.LocalPlayer,item) then
		maxPetCount += 4
	elseif cmd == "+8 Pets" and checkGamepass(game.Players.LocalPlayer,item) then
		maxPetCount += 8
	elseif cmd == "Infinite Pets" and checkGamepass(game.Players.LocalPlayer,item) then
		maxPetCount = 20
	elseif cmd == "x2 Damage" and checkGamepass(game.Players.LocalPlayer,item) then
		dmgMultiple = 2
	elseif cmd == "x2 Damage Speed" and checkGamepass(game.Players.LocalPlayer,item) then
		damageSpeedMultiple = 2
	elseif cmd == "x2 Walk Speed" and checkGamepass(game.Players.LocalPlayer,item) then
		walkspeedMultiple = 2
	end
end)

for _,door in pairs(game.Workspace.Doors:GetChildren()) do
	if door:FindFirstChild("SurfaceGui") ~= nil and door:FindFirstChild("SurfaceGui"):FindFirstChild("MainFrame") ~= nil then
		local mf = door:FindFirstChild("SurfaceGui"):FindFirstChild("MainFrame")
		local bf = door:FindFirstChild("SurfaceGui"):FindFirstChild("BuyFrame")
		for _,btn in pairs(mf:GetChildren()) do
			btn.MouseButton1Click:Connect(function()
				devProducts:FireServer(btn.ProductId.Value)
			end)
		end
		bf.BuyButton.MouseButton1Click:Connect(function()
			local bought = buySell:InvokeServer("BuyZone",door)
			if bought == false then
				local cg = getStats:InvokeServer("checkStat","Gold")
				spawn(function()
					wait(1)
					devProducts:FireServer(getDevProdId("Gold",door.Cost.Value-cg))
				end)
				displayWarning("Oh No! You are missing " .. numAbb(door.Cost.Value-cg) .. " Gold.\nYou can Claim Treasures or Purchase more Gold.")
			else
				displayWarning("Congratulations!\nYou have purchased\n" .. getStats:InvokeServer("checkStat","Zone"))
			end
		end)
	end
end

function devProdUI(guiObj, itemType)
	if not guiObj.MainFrame.Visible then
		closeOtherUI()
		local config
		if itemType == "Gold" then
			config = getDevProdId("GetGoldConfig")
		elseif itemType == "Exp" then
			config = getDevProdId("Experience")
		end
		tweenGuiObj(guiObj.MainFrame,false,UDim2.new(0.5,0,0.5,0),Enum.EasingDirection.Out,Enum.EasingStyle.Sine,0.25)
		guiObj.MainFrame.Visible = true
		local mf = guiObj.MainFrame.InteriorUI
		local function clickedBuy()
			if mf.SelectedItem.Value ~= nil and mf.SelectedItem.Value ~= 0 then
				if mf.Parent.Parent.Name == "GoldUI" then
					goldInHand = mf.CAmnt.Value
				elseif mf.Parent.Parent.Name == "ExpUI" then
					expInHand = mf.CAmnt.Value
				end
				devProducts:FireServer(mf.SelectedItem.Value)
			end
		end
		local tempCon1 = mf.BuyButton.MouseButton1Click:Connect(clickedBuy)
		table.insert(shopConnections, tempCon1)
		for _,item in pairs(guiObj.MainFrame.OptionsFrame:GetChildren()) do
			if item:IsA("ImageButton") then
				local function clickedItem()
					mf.DisplayImage.Image = item:FindFirstChildWhichIsA("ImageLabel").Image
					for _,v in pairs(config) do
						if tostring(v[1]) == item.Name then
							mf.CAmnt.Value = v[2]
							mf.Amount.Text = itemType .. ": " .. numAbb(v[2])
							mf:FindFirstChildWhichIsA("IntValue").Value = v[3]
							break
						end
					end
					mf.Cost.Text = "Robux: " .. numAbb(item.RobuxCost.Value)
				end
				local tempCon = item.MouseButton1Click:Connect(clickedItem)
				table.insert(shopConnections, tempCon)
			end
		end
	end
end

function closeOtherUI()
	for _,con in pairs(shopConnections) do
		con:Disconnect()
	end
	selectedInvenItem = nil
	for _,con in pairs(invenConnections) do
		con:Disconnect()
	end
	if inventoryUI.MainFrame:FindFirstChild("DisplayImage") then
		inventoryUI.MainFrame:FindFirstChild("DisplayImage"):Destroy()
	end
	shopUI.MainFrame:FindFirstChildWhichIsA("IntValue").Value = 0
	shopUI.MainFrame:FindFirstChildWhichIsA("IntValue").Name = "CurrentItem"
	goldUI.MainFrame.InteriorUI.CAmnt.Value = 0
	goldUI.MainFrame.InteriorUI.SelectedItem.Value = 0
	expUI.MainFrame.InteriorUI.CAmnt.Value = 0
	expUI.MainFrame.InteriorUI.SelectedItem.Value = 0
	local function slideOutUI(guiObj,pos)
		tweenGuiObj(guiObj.MainFrame,false,pos,Enum.EasingDirection.In,Enum.EasingStyle.Sine,0.25)
		wait(0.5)
		guiObj.MainFrame.Visible = false
	end
	if goldUI.MainFrame.Visible then
		slideOutUI(goldUI,UDim2.new(-0.5,0,0.5,0))
	end
	if expUI.MainFrame.Visible then
		slideOutUI(expUI,UDim2.new(-0.5,0,0.5,0))
	end
	if statsUI.MainFrame.Visible then
		slideOutUI(statsUI,UDim2.new(1.55,-10,1,-10))
	end
	if settingsUI.MainFrame.Visible then
		slideOutUI(settingsUI,UDim2.new(1.5,0,0.5,0))
	end
	if gamepassUI.MainFrame.Visible then
		slideOutUI(gamepassUI,UDim2.new(0.5,0,-0.5,0))
	end
	if inventoryUI.MainFrame.Visible then
		slideOutUI(inventoryUI,UDim2.new(0.5,0,-0.5,0))
	end
	if shopUI.MainFrame.Visible then
		guiDisplay(shopUI,"Close")
	end
end

digR.OnClientEvent:Connect(function(cmd,treasurePart,zoneNum)
	if cmd == "StartProcess" then
		if currentDiggingUI ~= nil then
			currentDiggingUI:Destroy()
		end
		walkingToTarget = true
		local hui = healthUI:Clone()
		currentDigUI = hui
		currentDiggingUI = hui
		hui.Parent = treasurePart
		local hp = treasurePart.Parent:FindFirstChildWhichIsA("IntValue")
		local name = treasurePart.Parent:FindFirstChildWhichIsA("StringValue").Value
		hui.ImageLabel.Amount.Text = numAbb(hp.Value) .. " | " .. numAbb(zoneNum*zoneNum*zoneNum*zoneNum*zoneNum*zoneNum*(treasureStats[name]/2))
		hp.Changed:Connect(function()
			if hui:FindFirstChild("ImageLabel") then
				hui.ImageLabel.Amount.Text = numAbb(hp.Value) .. " | " .. numAbb(zoneNum*zoneNum*zoneNum*zoneNum*zoneNum*zoneNum*(treasureStats[name]/2))
			end
		end)
	elseif cmd == "StartDigging" and not diggingInProcess then
		diggingInProcess = true
		digTrack:Play()
		while diggingInProcess do
			for i = 1,10/damageSpeedMultiple do
				wait(digTrack.Length/10)
				if not diggingInProcess then
					return
				end
			end
			local dmg = math.floor(getStats:InvokeServer("getDamage")*dmgMultiple)
			local txt = repS.RepItems.DmgNum:Clone()
			txt.Position = UDim2.new(math.random(199,701)/1000,0,math.random(200,700)/1000,0)
			txt.Text = "-" .. numAbb(dmg)
			txt.Parent = effectsUI.Frame
			tweenGuiObj(txt,UDim2.new(0.079, 0,0.173, 0),UDim2.new(txt.Position.X.Scale+(math.random(-100,100)/1000),0,txt.Position.Y.Scale+0.1,0),Enum.EasingDirection.Out,Enum.EasingStyle.Bounce,1)
			spawn(function()
				wait(1)
				for i = 1,10 do
					wait()
					txt.TextTransparency += 0.1
				end
				txt:Destroy()
			end)
			if currentDiggingUI ~= nil then
				if currentDiggingUI.parent ~= nil then
					if currentDiggingUI.Parent.Parent ~= nil then
						digR:FireServer("Damage",currentDiggingUI.Parent.Parent,dmg)
					end
				end
			end
		end
	elseif cmd == "PetDigging" then
		local dmg = treasurePart*dmgMultiple
		local txt = repS.RepItems.DmgNum:Clone()
		txt.Position = UDim2.new(math.random(199,701)/1000,0,math.random(200,700)/1000,0)
		txt.Text = "-" .. numAbb(dmg)
		txt.Parent = effectsUI.Frame
		tweenGuiObj(txt,UDim2.new(0.0632, 0,0.1384, 0),UDim2.new(txt.Position.X.Scale+(math.random(-100,100)/1000),0,txt.Position.Y.Scale+0.1,0),Enum.EasingDirection.Out,Enum.EasingStyle.Bounce,1)
		spawn(function()
			wait(0.65)
			for i = 1,10 do
				wait()
				txt.TextTransparency += 0.1
			end
			txt:Destroy()
		end)
		digR:FireServer("Damage",currentDiggingUI.Parent.Parent,dmg)
	elseif cmd == "StopDigging" and diggingInProcess then
		diggingInProcess = false
		digTrack:Stop()
	elseif cmd == "DestroyGUI" and treasurePart.MudPart:FindFirstChildWhichIsA("BillboardGui") then
		treasurePart.MudPart:FindFirstChildWhichIsA("BillboardGui"):Destroy()
	end
end)

function rotateViewport(vpcl)
	spawn(function()
		while vpcl ~= nil do
			wait()
			if vpcl:FindFirstChildWhichIsA("Model") then
				local m = vpcl:FindFirstChildWhichIsA("Model")
				if m ~= nil then
					m:SetPrimaryPartCFrame(m.PrimaryPart.CFrame * CFrame.Angles(0,math.rad(2),0))
				end
			else
				break
			end
		end
	end)
end

function tweenGuiObj(frameObj,size,pos,dir,style,sec)
	if frameObj ~= nil then
		if type(size) == "userdata" and type(pos) == "userdata" then
			frameObj:TweenSizeAndPosition(size,pos,dir,style,sec,true)
		elseif type(size) == "userdata" and type(pos) == "boolean" then
			frameObj:TweenSize(size,dir,style,sec,true)
		elseif type(size) == "boolean" and type(pos) == "userdata" then
			frameObj:TweenPosition(pos,dir,style,sec,true)
		end
	end
end

function getDate(date,dateType,dateName)
	local tempDate = 0
	local totalSecRemoved = 0
	while date - dateType >= 0 do
		tempDate+=1
		totalSecRemoved += dateType
		date -= dateType
	end
	if tempDate > 0 then
		return {tempDate .. " " .. dateName, totalSecRemoved}
	end
	return {"0 " .. dateName,totalSecRemoved}
end

function getDevProdId(prodType, missingAmount)
	-- 1:1x, 2:2x, 3:4x, 4:8x, 5:16x, 6:25x ||||| exp: 1:10%, 2:45%, 3:75%, 4:100%, 5:150%, 6:300%
	if prodType == "Gold" then
		local zoneNum = getStats:InvokeServer("checkZoneLvl")
		if zoneNum ~= nil then
			local base = eggCost["Egg" .. zoneNum]
			for i = 0,5 do
				local totalAmount = base
				if i == 0 then
					totalAmount = totalAmount*1
				elseif i == 1 then
					totalAmount = totalAmount*2
				elseif i == 2 then
					totalAmount = totalAmount*4
				elseif i == 3 then
					totalAmount = totalAmount*8
				elseif i == 4 then
					totalAmount = totalAmount*16
				elseif i == 5 then
					totalAmount = totalAmount*25
				end
				if totalAmount >= missingAmount then
					goldInHand = totalAmount
					return devProcIds["Coin" .. i]
				end
			end
			return devProcIds["Coin5"]
		end
	elseif prodType == "Experience" then
		local lvl = getStats:InvokeServer("checkStat","Level")
		local config = {}
		if lvl ~= nil then
			local totalExp = math.floor(25*(lvl*lvl)-25*lvl+50)
			for i = 0,5 do
				local multiplier = 1
				if i == 0 then
					multiplier = 0.10
				elseif i == 1 then
					multiplier = 0.45
				elseif i == 2 then
					multiplier = 0.75
				elseif i == 3 then
					multiplier = 1
				elseif i == 4 then
					multiplier = 1.5
				elseif i == 5 then
					multiplier = 3
				end
				table.insert(config,{i,totalExp*multiplier,devProcIds["Exp" .. i]})
			end
			return config
		end
	elseif prodType == "GetGoldConfig" then
		local zoneNum = getStats:InvokeServer("checkZoneLvl")
		local config = {}
		if zoneNum ~= nil then
			local base = eggCost["Egg" .. zoneNum]
			for i = 0,5 do
				local totalAmount = base
				if i == 0 then
					totalAmount = totalAmount*1
				elseif i == 1 then
					totalAmount = totalAmount*2
				elseif i == 2 then
					totalAmount = totalAmount*4
				elseif i == 3 then
					totalAmount = totalAmount*8
				elseif i == 4 then
					totalAmount = totalAmount*16
				elseif i == 5 then
					totalAmount = totalAmount*25
				end
				table.insert(config,{i,totalAmount,devProcIds["Coin" .. i]})
			end
			return config
		end
	end
end

function checkGamepass(player,gamepassId)
	if player then
		local userId = player.UserId
		return MarketPlaceService:UserOwnsGamePassAsync(userId,gamepassId)
	end
end

local function CharacterAdded(char)
	if char.Name == game.Players.LocalPlayer.Name then
		-- Character Added:
		variableReset()
		char = player.Character
		head = char:WaitForChild('Head')
		hum = char:WaitForChild('Humanoid')
		
		if checkGamepass(game.Players.LocalPlayer,13098841) then
			maxPetCount = 100
		else
			if checkGamepass(game.Players.LocalPlayer,13098804) then
				maxPetCount += 8
			end
			if checkGamepass(game.Players.LocalPlayer,13098743) then
				maxPetCount += 4
			end
		end
		if checkGamepass(game.Players.LocalPlayer,13099011) then
			dmgMultiple = 2
		end
		if checkGamepass(game.Players.LocalPlayer,13099081) then
			damageSpeedMultiple = 2
		end
		if checkGamepass(game.Players.LocalPlayer,13099122) then
			walkspeedMultiple = 2
		end
		
		hum.WalkSpeed = 16 * walkspeedMultiple
		hum.Died:Connect(function()
			variableReset()
		end)
		warningUI = player.PlayerGui.WarningUI
		shopUI = player.PlayerGui.ShopUI
		goldUI = player.PlayerGui.GoldUI
		cardUI = player.PlayerGui.CardUI
		expUI = player.PlayerGui.ExpUI
		statsUI = player.PlayerGui.StatsUI
		eggsUI = player.PlayerGui.EggsUI
		gamepassUI = player.PlayerGui.GamepassUI
		inventoryUI = player.PlayerGui.InventoryUI
		settingsUI = player.PlayerGui.SettingsUI
		effectsUI = player.PlayerGui.EffectsUI

		digTrack = hum:LoadAnimation(digAnim)
		local function Moved()
			local uiList = {
				goldUI,
				expUI,
				statsUI,
				eggsUI,
				gamepassUI,
				settingsUI,
				inventoryUI
			}
			if hum.MoveDirection.magnitude > 0 then
				for _,v in pairs(uiList) do
					if v:FindFirstChild("MainFrame") and v:FindFirstChild("MainFrame").Visible then
						closeOtherUI()
					end
				end
				if walkingToTarget then
					walkingToTarget = false
					if currentDigUI then
						currentDigUI:Destroy()
					end
					digR:FireServer("Stop")
				end
				if diggingInProcess then
					diggingInProcess = false
					digTrack:Stop()
				end
			end	
		end
		hum:GetPropertyChangedSignal("MoveDirection"):Connect(Moved)
		local uid = game.Players.LocalPlayer.UserId
		if uid < 0 then
			uid = 1467362277
		end
		local thumbType = Enum.ThumbnailType.AvatarBust
		local thumbSize = Enum.ThumbnailSize.Size420x420
		local content, bool = game.Players:GetUserThumbnailAsync(uid, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size150x150);
		cardUI.Frame.MainUI.PlayerDisplay.Image = tostring(content)
		
		playerImg = content
		for i,v in pairs(playerStats) do
			if getStats:InvokeServer("checkStat",i) ~= nil then
				playerStats[i] = getStats:InvokeServer("checkStat",i)
				updateUI(i)
			end
		end
		populateInventory()
		loadUI()
		zoneCheck()
		spawn(function()
			wait(2)
			if not char:FindFirstChild("Shovel") then
				updClient:FireServer("UpdateShovel")
			end
		end)
	end
end

local function PlayerAdded(player)
	player.CharacterAdded:Connect(CharacterAdded)
	local char = player.Character
	if char then
		CharacterAdded(char)
	end
end
game.Players.PlayerAdded:Connect(PlayerAdded)
for i,v in next,game.Players:GetPlayers() do
	PlayerAdded(v)
end
